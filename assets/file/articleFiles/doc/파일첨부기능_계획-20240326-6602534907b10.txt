C:\Users\yeram\workspace\naver_cafe\assets\file\commentFiles\img\루피-20240312-65f01acbbb1e0.png


C:\Users\yeram\workspace\naver_cafe\assets\file\articleFiles\img\배경화면-20240217-65d072f2960ec.jpg


file:///C:/Users/yeram/workspace/naver_cafe/assets/file/images/articleFiles/img/%EB%B0%B0%EA%B2%BD%ED%99%94%EB%A9%B4-20240217-65d072f2960ec.jpg


1. 사용자가 게시글 작성 폼으로 진입해서 게시글의 제목을 입력할 수 있는 입력창과 내용과 사진파일을 업로드하고 첨부할 수 있는 ck에디터가 표시된 페이지를 확인함.
2. 사용자가 자유롭게 제목(필수입력)과 내용텍스트(선택적 - 텍스트나 파일첨부 한가지는 꼭 해야함)를 적고 사진 및 기타 파일업로드를 시도함.
3. 업로드 된 파일은 한 개이상의 여러 개일 수 있으므로, 해당 파일의 정보들을 우선적으로 배열에 저장함.
4. 배열에 저장된 파일은 게시글 작성 폼을 제출하기 전 임시로 관리하는 배열이므로, 파일의 내용들은 동적으로 추가 및 삭제될 수 있으며 게시글 작성 폼이 제출될 때는 최종적으로 배열에 남아있는 파일들만 업로드를 시도해야함.
5. 폼이 제출되어도 File엔티티에 외래키로 참조해야 하는 article의 id값을 확인하기 전까지는 파일들을 곧장 File엔티티에 저장할 수 없으므로, article엔티티에 필요한 칼럼데이터를 먼저 저장하고 article의 id값을 확인함.
아래는 article이 저장될 때 필요한 칼럼데이터
{id[기본키], 
article_board_id(게시판정보 - form에서 받아옴), 
member_id(작성자정보 - form에서 받아옴), 
parent_id(답글을 작성하는 상황일 때는 부모글이 존재함(부모글의id). 하지만 신규글 작성시에는 부모글이 존재하지 않음(NULL) - form에서 받아옴), 
createDate, modifyDate(게시글 수정시에만 입력됨), 
ip(현재접속ip), title(게시글 제목 - form에서 받아옴), 
content(텍스트로 이루어진 게시글의 내용 - form에서 받아옴), 
hit(조회수여서 게시글 작성때는 1로 초기화 하여 입력함.), 
isActive(게시글 활성화 여부, 1로 초기화), 
publicScope(공개범위 - form에서 받아옴),
depth(뎁스 - 최상위 부모글(신규게시글)일 경우에는 0, 부모글(parent_id)이 존재할 경우에는 부모글의 depth보다 1이 증가한다. - form에서 받아옴),
prefix(말머리 - 게시판에 따라서 지정될 수도 없을 수도 있다. - form에서 받아옴),
orderGroup(계층형 게시판의 그룹지정용 칼럼(최상위 부모글일 때만 신규로 생성되며 그 밑으로 자식글이 생길 때는 최상위부모의 orderGroup값을 상속받음) - form에서 받아옴),
deletedDate(게시글 삭제일시 - 기본적으로 게시글이 생성될 때는 NULL이며, 삭제시에 삭제일시가 추가됨)
}
6. 확인된 article의 id값을 바탕으로 해당 article이 작성될 때 첨부되었던 파일들의 배열데이터를 기반으로 File엔티티에 파일데이터를 추가함.
7. article이 작성되고 첨부파일이 있다면(if) File엔티티에 정상적으로 파일데이터가 삽입된것 까지 확인 후 게시글 작성 프로세스 마침
8. 게시글 작성 성공시 게시글 작성이 완료되었습니다. 라는 alert메시지를 표시한 후 해당 게시글 상세보기 페이지로 이동함.
9. 게시글 작성 실패시 페이지를 리다이렉션하지 않고 ajax로 해당 예외처리 오류메시지를 alert로 표시함.